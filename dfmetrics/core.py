# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['BranchField', 'keycheck', 'branch']

# %% ../nbs/00_core.ipynb 3
import pandas as pd
from collections import namedtuple
from typing import List
from itertools import pairwise

# %% ../nbs/00_core.ipynb 5
BranchField = namedtuple('BranchField', ['column', 'values'])
# Input fields are namedtuples with (col, [*values]).
# Branch i has rows where row[col] == value[i]


def keycheck(col, ks, df):
    all_ks = tuple(df[col].dropna().unique())
    if ks is None: return all_ks
    return tuple(k for k in ks if k and k in all_ks)

def branch(df, fields):
    "df branching as specified by fields"
    fields = [BranchField(*f) for f in fields]
    names = [f[0] for f in fields]
    tree_dict = {}

    def _branch(_df, _fields, key_start):
        "Recursive inner branching function"
        (col, ks), *_fields_next = _fields
        ks = keycheck(col, ks, _df)
        full_ks = [key_start + [k] for k in ks]
        if not _fields_next:
            for k, fk in zip(ks, full_ks):
                tree_dict[tuple(fk)] = _df[_df[col]==k]
        else:
            for k, fk in zip(ks, full_ks):
                _branch(_df[_df[col]==k], _fields_next, fk)

    _branch(df, fields, [])
    return tree_dict, names
